# Configuration file for tutorials.cpp

# This configuration file should be named 'cgt.cfg' and
# included under the same directory as the source code.

password = hello_world

@circuitDB = pil
@sizes = 8

# These two variables with '@' sign in the front refers to
# global, but optional, variables. If encryption scheme and
# size are not specified by the datatype defined below, then
# these two are implemented.

# Below are the datatypes you will create using the cgt.exe tool
# and later use in your C++ source code. Left side of colon is the
# user-defined name. In your source code, you declare 'SecureInt'
# to be [user-defined name][regular datatype] (e.g. NativeInt,
# PilcInt, PilcUint).

# Native is often used to test the compilation of the program
# with faster speed. This does not include a secure encryption.

Native:native
{
	postfix = EN
	postneg = ENn
	msize = 64

# Postfix for constants is optional: if not defined, then
# constants are forbidden in the program. 'Postneg' refers to
# the postfix for negative constants.

}


# Following is to maximize the use of arithmetic circuit in computation,
# which is faster but is incomplete. 'circuit' refers to boolean circuit
# and 'partial' refers to arithmetic circuit. 'bridge' is used to enable
# circuits-to-arithmetic conversion so that some operations can be done
# using boolean circuits and still be incorporated with other arithmetic
# operations.

Pilx : bridge
{
	encryption = pil
	module = bridge.pilx # add Pil cross functions
	lambda = 20
}

Type : circuit
{
	postfix = Ep
	postneg = En
	encryption = @Pilx # pilc
#	encryption = pil # pilc
}

TypeMint : partial
{
	postfix = Ea
#	encryption = pil # pila
	encryption = @Pilx # pila
}
